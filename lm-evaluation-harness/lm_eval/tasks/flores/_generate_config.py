import argparse

import yaml


# Different languages that are part of xnli.
# These correspond to dataset names (Subsets) on HuggingFace.
# A yaml file is generated by this script for each language.

language_pair_list = """
afr_Latn_to_eng_Latn    eng_Latn_to_bel_Cyrl    eng_Latn_to_hrv_Latn    eng_Latn_to_nld_Latn    eng_Latn_to_swh_Latn    hin_Deva_to_eng_Latn    mya_Mymr_to_eng_Latn    swe_Latn_to_eng_Latn
arb_Arab_to_eng_Latn    eng_Latn_to_bos_Latn    eng_Latn_to_hun_Latn    eng_Latn_to_nob_Latn    eng_Latn_to_tha_Thai    hrv_Latn_to_eng_Latn    nld_Latn_to_eng_Latn    swh_Latn_to_eng_Latn
bel_Cyrl_to_eng_Latn    eng_Latn_to_bul_Cyrl    eng_Latn_to_ind_Latn    eng_Latn_to_pol_Latn    eng_Latn_to_tur_Latn    hun_Latn_to_eng_Latn    nob_Latn_to_eng_Latn    tha_Thai_to_eng_Latn
bos_Latn_to_eng_Latn    eng_Latn_to_ces_Latn    eng_Latn_to_isl_Latn    eng_Latn_to_por_Latn    eng_Latn_to_ukr_Cyrl    ind_Latn_to_eng_Latn    pol_Latn_to_eng_Latn    tur_Latn_to_eng_Latn
bul_Cyrl_to_eng_Latn    eng_Latn_to_dan_Latn    eng_Latn_to_ita_Latn    eng_Latn_to_rus_Cyrl    eng_Latn_to_vie_Latn    isl_Latn_to_eng_Latn    por_Latn_to_eng_Latn    ukr_Cyrl_to_eng_Latn
ces_Latn_to_eng_Latn    eng_Latn_to_deu_Latn    eng_Latn_to_jpn_Jpan    eng_Latn_to_slk_Latn    eng_Latn_to_zho_Hans    ita_Latn_to_eng_Latn    rus_Cyrl_to_eng_Latn    vie_Latn_to_eng_Latn
dan_Latn_to_eng_Latn    eng_Latn_to_fin_Latn    eng_Latn_to_kor_Hang    eng_Latn_to_slv_Latn    eng_Latn_to_zho_Hant    jpn_Jpan_to_eng_Latn    slk_Latn_to_eng_Latn    zho_Hans_to_eng_Latn
deu_Latn_to_eng_Latn    eng_Latn_to_fra_Latn    eng_Latn_to_ltz_Latn    eng_Latn_to_spa_Latn    fin_Latn_to_eng_Latn    kor_Hang_to_eng_Latn    slv_Latn_to_eng_Latn    zho_Hant_to_eng_Latn
eng_Latn_to_afr_Latn    eng_Latn_to_hau_Latn    eng_Latn_to_mkd_Cyrl    eng_Latn_to_srp_Cyrl    fra_Latn_to_eng_Latn    ltz_Latn_to_eng_Latn    spa_Latn_to_eng_Latn
eng_Latn_to_arb_Arab    eng_Latn_to_hin_Deva    eng_Latn_to_mya_Mymr    eng_Latn_to_swe_Latn    hau_Latn_to_eng_Latn    mkd_Cyrl_to_eng_Latn    srp_Cyrl_to_eng_Latn
""".split()

lang_mapping = {
    'ces_Latn': 'Czech', 'dan_Latn': 'Danish', 'ukr_Cyrl': 'Ukrainian', 'bul_Cyrl': 'Bulgarian', 'fin_Latn': 'Finnish', 'hun_Latn': 'Hungarian', 
    'nob_Latn': 'Norwegian', 'ind_Latn': 'Indonesian', 'jpn_Jpan': 'Japanese', 'kor_Hang': 'Korean', 'por_Latn': 'Portuguese', 'slv_Latn': 'Slovenian', 
    'vie_Latn': 'Vietnamese', 'pol_Latn': 'Polish', 'zho_Hans': 'Chinese (Simplified)', 'zho_Hant': 'Chinese (Traditional)', 'deu_Latn': 'German', 
    'isl_Latn': 'Icelandic', 'rus_Cyrl': 'Russian', 'arb_Arab': 'Arabic', 'fra_Latn': 'French', 'spa_Latn': 'Spanish', 'tur_Latn': 'Turkish', 
    'hin_Deva': 'Hindi', 'swh_Latn': 'Swahili', 'tha_Thai': 'Thai', 'afr_Latn': 'Afrikaans', 'nld_Latn': 'Dutch', 'swe_Latn': 'Swedish', 
    'ltz_Latn': 'Luxembourgish', 'bel_Cyrl': 'Belarusian', 'bos_Latn': 'Bosnian', 'hrv_Latn': 'Croatian', 'mkd_Cyrl': 'Macedonian', 'srp_Cyrl': 'Serbian',
    'slk_Latn': 'Slovak', 'mya_Mymr': 'Burmese', 'hau_Latn': 'Hausa', 'ita_Latn': 'Italian', 'eng_Latn': 'English'
}


def gen_lang_yamls(output_dir: str, overwrite: bool) -> None:
    """
    Generate a yaml file for each language.

    :param output_dir: The directory to output the files to.
    :param overwrite: Whether to overwrite files if they already exist.
    """
    err = []
    for lang_pair in language_pair_list:
        src, tgt = lang_pair.split('_to_')
        file_name = f"flores_{lang_pair}.yaml"
        try:
            with open(
                f"{output_dir}/{file_name}", "w" if overwrite else "x", encoding="utf8"
            ) as f:
                f.write("# Generated by utils.py\n")
                yaml.dump(
                    {
                        "include": "flores_common_yaml",
                        "dataset_name": lang_pair,
                        "task": f"flores_{lang_pair}",
                        "doc_to_text": f"{{{{"
                        f"""\"Translate this from {lang_mapping[src]} to {lang_mapping[tgt]}:\n{lang_mapping[src]}: \" + source + \"\n{lang_mapping[tgt]}: \""""
                        f"}}}}",
                    },
                    f,
                    allow_unicode=True,
                )
        except FileExistsError:
            err.append(file_name)

    if len(err) > 0:
        raise FileExistsError(
            "Files were not created because they already exist (use --overwrite flag):"
            f" {', '.join(err)}"
        )


def main() -> None:
    """Parse CLI args and generate language-specific yaml files."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--overwrite",
        default=False,
        action="store_true",
        help="Overwrite files if they already exist",
    )
    parser.add_argument(
        "--output-dir", default=".", help="Directory to write yaml files to"
    )
    args = parser.parse_args()

    gen_lang_yamls(output_dir=args.output_dir, overwrite=args.overwrite)


if __name__ == "__main__":
    main()
